#!/usr/bin/python3
import numpy as np

def det_3x3(x):
    sm1= x[np.ix_([1,2],[1,2])]
    sm2= x[np.ix_([1,2],[0,2])]
    sm3= x[np.ix_([1,2],[0,1])]
    D = x[0,0]*det_2x2(sm1)-x[0,1]*det_2x2(sm2)+x[0,2]*det_2x2(sm3)
    return D

def det_2x2(x):

    D = x[0,0]*x[1,1]-x[1,0]*x[0,1]
    D =float(D)
    return D

def cramer_2x2(A,B):
    A1 = np.copy(A)
    A2 = np.copy(A)

    A1[:,0] = B
    A2[:,1] = B

    x= det_2x2(A1)/det_2x2(A)
    y= det_2x2(A2)/det_2x2(A)
    T=np.array([x,y])
    return (T)

def cramer_3x3(A,B):
    A1 = np.copy(A)
    A2 = np.copy(A)
    A3= np.copy(A)


    A1[:,0] = B
    A2[:,1] = B
    A3[:,2] = B
   
    x=det_3x3(A1)/det_3x3(A)
    y=det_3x3(A2)/det_3x3(A)
    z=det_3x3(A3)/det_3x3(A)
    T=np.array([[x,y,z]])
    T=np.swapaxes(T,0,1)
    return T

   
def main():
    A = np.array([[1,52,2],
                         [12,65,3],
                         [9,5,2]])
    b = np.array([[4,8,2]])
#printing det of 3x3
    print("Det of 3x3=",det_3x3(A))
    print("coded det of 3x3=\n",np.linalg.det(A))
#print soln of 3x3
    print("coded 3x3\n",cramer_3x3(A,b))
    linalg_sol=np.linalg.solve(A,np.transpose(b))
    print("3x3 linalg\n",linalg_sol)
   # print("calc soln of 3x3\t",np.linalg.solve(input_3x3,soln_3x3))
   
    A = np.array([[2,3],
                  [4,5]])
    b = np.array([2,3])
#print det of 2x2
    print("coded det of 2x2\n",det_2x2(A))
    print("calc det of 2x2\n",np.linalg.det(A))
#print of soln 2x2
    print("coded soln 2x2\n",cramer_2x2(A,b))
    print("calc soln of 2x2\n",np.linalg.solve(A,b))

if __name__=="__main__":
    main()
