import math
def calculate_roots(coef):
#THIS SHOULD WORK
    a = coef[0]
    b = coef[1]
    c = coef[2]
    inside = (b**2-4*a*c)
    if inside < 0:
        inside = inside*(-1)
        x = (-b+1j*math.sqrt(inside))/(2*a)
        y = (-b-1j*math.sqrt(inside))/(2*a)
    else:
        x = (-b+math.sqrt(inside))/(2*a)
        y = (-b-math.sqrt(inside))/(2*a)
    answers = [x,y]
    return answers

def compute_factorial(n):
#this should hopefully work, i dont know how to code
    if n == 1:
        return 1
    else:
        return (n *compute_factorial(n-1))

    
def sum_factorial(n):
    if n == 1:
    	return 1
    else:
    	return (compute_factorial(n)+sum_factorial(n-1))
    
def f(x):
    return math.e ** (-3*x) * math.cos(math.pi * x)
        
def left_riemann(delta_x, lb, ub):
    i = lb
    val = 0

    while i < ub:
        val += f(i) * delta_x
        i += delta_x
    return val
    

def right_riemann(delta_x, lb, ub):
    i = lb + delta_x
    val = 0

    while i <= ub:
        val += f(i) * delta_x
        i += delta_x

    return val
    

def midpoint_riemann(delta_x, lb, ub):
    i = lb + delta_x/2
    val = 0

    while i < ub:
        val += f(i) * delta_x
        i += delta_x
    return val

    
def trap_riemann(delta_x, lb, ub):
    i = lb
    val = 0
    while i < ub:
        left = i
        right = i + delta_x
        val += (f(left) + f(right))/2*delta_x
        i += delta_x

    return val






def main():
    ##############################################################
    # Part 1
    ##############################################################
    print("Part 1 Results")
    
    coef = [2, 4, 0]
    roots = calculate_roots(coef)
    print("roots 1:")
    print(roots)
    coef = [1, 4, 4]
    roots = calculate_roots(coef)
    print("roots 2:")
    print(roots)
    
    coef = [1, 0, 9]
    roots = calculate_roots(coef)
    print("roots 3:")
    print(roots)
    coef = [2, 8, 26]
    roots = calculate_roots(coef)
    print("roots 4:")
    print(roots)
    ##############################################################
    # Part 2
    ##############################################################
    print("\n")
    print("Part 2 Results")
    
    for n in [4, 10, 16]:
        output_factorial = compute_factorial(n)
        print("computed factorial for n=%i is: %i" %
              (n, output_factorial))
    ##############################################################
    # Part 3
    ##############################################################
    print("\n")
    print("Part 3 Results")
    
    for n in [3, 5, 6]:
        output_summation = sum_factorial(n)
        print("computed factorial summation for n=%i is: %i" %
              (n, output_summation))
        
    ##############################################################
    # Part 4
    ##############################################################
    print("\n")
    print("Part 4 Results")
    
    lb = 0
    ub = 10
    
    print("calculating left Riemann sum")
    for delta_x in [1, 0.1, 0.01, 0.0001]:
        summation = left_riemann(delta_x, lb, ub)
        print("\tdelta_x=%f, summation=%f" % (delta_x, summation))
    print("calculating right Riemann sum")
    for delta_x in [1, 0.1, 0.01, 0.0001]:
        summation = right_riemann(delta_x, lb, ub)
        print("\tdelta_x=%f, summation=%f" % (delta_x, summation))
    print("calculating midpoint Riemann sum")
    for delta_x in [1, 0.1, 0.01, 0.0001]:
        summation = midpoint_riemann(delta_x, lb, ub)
        print("\tdelta_x=%f, summation=%f" % (delta_x, summation))
    print("calculating trapezoid Riemann sum")
    for delta_x in [1, 0.1, 0.01, 0.0001]:
        summation = trap_riemann(delta_x, lb, ub)
        print("\tdelta_x=%f, summation=%f" % (delta_x, summation))
        
if __name__ == "__main__":
    main()
